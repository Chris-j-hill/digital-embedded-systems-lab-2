C51 COMPILER V9.54   MEASUREMENT                                                           02/24/2018 21:16:57 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MEASUREMENT
OBJECT MODULE PLACED IN .\Objects\measurement.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Source\measurement.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.
                    -\Listings\measurement.lst) TABS(2) OBJECT(.\Objects\measurement.obj)

line level    source

   1          
   2          #include "measurement.h"
   3          #include <ADUC841.H>
   4          #include "config.h"
   5          
   6          extern volatile uint8 mode;
   7          
   8          
   9          //dc averaging variables
  10          #ifdef USE_CIRCULAR_BUFFER
  11          #define BUFSIZE 16
  12          volatile uint16 circular_buffer[BUFSIZE] ={0}; // array to hold values
  13          #else
              volatile uint16 block_buffer =0;      // simple value to store sum
              #define DC_AVG_NUM_SAMPLES 128
              #endif
  17          
  18          #define DC_TIMER_OVERFLOWS 10   // n*5.9 milliseconds between readings
  19          uint8 dc_voltage_num_timer_overflows =0;
  20          
  21          uint8 dc_avg_counter =0;
  22          uint16 dc_sum;
  23          volatile uint16 dc_avg;   // <<<  display this value
  24          
  25          //freq measurment
  26          extern volatile uint32 avg_freq;
  27          extern volatile uint8 nb_overflow;
  28          
  29          
  30          void setup_timers_dc_averaging(){
  31   1          
  32   1          T2CON = 7;  // all zero except run control
  33   1          ET2   = 1;     // enable timer 2 interrupt
  34   1          EA = 1;
  35   1        
  36   1        //disable other timers...
  37   1      
  38   1      }
  39            
  40            
  41          
  42          void setup_timers_freq_period_counting() {
  43   1          // Set up timer 2 in timer mode (bit1), capture mode(bit0), external control activated(bit3), timer run(
             -bit2), serial not needed(bit4-5),then interrupt modified by hardware
  44   1          //T2CON = 0b00001101;  // all zero except run control
  45   1          T2CON = 13;  // all zero except run control
  46   1          ET2   = 1;     // enable timer 2 interrupt
  47   1          EA = 1;       // enable general interrupt
  48   1        
  49   1          //uint8 nb_t2_of =0;
  50   1        
  51   1        
  52   1        //disable other timers...
  53   1        
C51 COMPILER V9.54   MEASUREMENT                                                           02/24/2018 21:16:57 PAGE 2   

  54   1      }
  55          
  56          
  57          
  58          
  59          
  60          
  61          void dc_voltage_measurment(){ // functions to store measurements as required
  62   1      
  63   1        if (TF2 == 1){  //if counter overflow, increment counter
  64   2        dc_voltage_num_timer_overflows = (dc_voltage_num_timer_overflows+1) % DC_TIMER_OVERFLOWS;
  65   2        TF2 = 0;
  66   2      
  67   2          if(dc_voltage_num_timer_overflows ==0){ 
  68   3            
  69   3            uint16 val = read_analog_input_pin();
  70   3            
  71   3          #ifdef USE_CIRCULAR_BUFFER    // will update avg every time a value is read
  72   3            
  73   3            //circular buffer implementation
  74   3            
  75   3            dc_avg_counter = (dc_avg_counter + 1) % BUFSIZE;
  76   3            dc_sum = dc_sum - circular_buffer[dc_avg_counter];        //subtract the old value from the running sum
  77   3            circular_buffer[dc_avg_counter] = val;
  78   3            dc_sum = dc_sum + circular_buffer[dc_avg_counter];        //add new value to sum
  79   3            dc_avg = dc_sum/BUFSIZE;
  80   3            
  81   3            
  82   3            
  83   3          #else                         // update avg every after DC_AVG_NUM_SAMPLES readings
                    
                    //block buffer implementation 
                    
                    dc_avg_counter = (dc_avg_counter + 1) % DC_AVG_NUM_SAMPLES;
                    if (dc_avg_counter==0){ //after DC_AVG_NUM_SAMPLES readings, reset sum
                      dc_avg= dc_sum/DC_AVG_NUM_SAMPLES;  //calculate avg
                      dc_sum=0; //reset_sum   
                    }
                    dc_sum = dc_sum+val;
                    
                  #endif
  95   3            
  96   3          }
  97   2        }
  98   1        
  99   1        else if(EXF2==1)    //if for some reason this triggered interrupt, reset to stop continual interrupts
 100   1          EXF2 =0;
 101   1      } 
 102          
 103          void rms_measurment(){}         
 104          
 105          void p2p_measurement(){}      
 106          
 107          void frequency_measurement() 
 108          {
 109   1        //Setup the initial values of the static variables to ZERO
 110   1        static uint32 new_sample=0;
 111   1        static uint8 past_RCAP2H=0;
 112   1        static uint8 past_RCAP2L=0;
 113   1        
 114   1        
 115   1        if(EXF2==1){ // new edges incoming (of the periodic signal we want to measure) => end of the a period
C51 COMPILER V9.54   MEASUREMENT                                                           02/24/2018 21:16:57 PAGE 3   

 116   2          //What is the new sample ?
 117   2          new_sample = (nb_overflow<<16)  + ((RCAP2H-past_RCAP2H)<<8) + (RCAP2L-past_RCAP2L); //concatenate the 3 b
             -ytes
 118   2          //Update the average using IIR filter
 119   2          avg_freq=(new_sample*3)/20 + (avg_freq*17)/20;   //alpha chosen 0.15=3/20
 120   2          
 121   2          //Prepare the next interruption
 122   2          past_RCAP2H=RCAP2H;
 123   2          past_RCAP2L=RCAP2L;
 124   2          nb_overflow=0;
 125   2          EXF2=0;//clear the flag
 126   2        }
 127   1          else  //EXF2==0 and TF2==1
 128   1        {
 129   2            nb_overflow++;
 130   2            TF2=0; //clear the flag
 131   2        } 
 132   1        
 133   1      }
 134            
 135          uint16 read_analog_input_pin(){
 136   1      //CS0 = 0;  //confirm analog pin
 137   1      //CS1 = 1;
 138   1      //CS2 = 0;
 139   1      //CS3 = 0;
 140   1      uint8 val_LSB = ADCDATAL;
 141   1      uint8 val_MSB = ADCDATAH;
 142   1      uint16 val = (val_MSB>>8)+val_LSB;
 143   1        return val;
 144   1      } 
 145          
 146          
 147          /*------------------------------------------------
 148          Interrupt service routine for timer 2 interrupt.
 149          Called by the hardware when the interrupt occurs.
 150          ------------------------------------------------*/
 151          void timer2 (void) interrupt 5   // interrupt vector at 002BH
 152          {
 153   1        switch(mode){
 154   2          case 0:   dc_voltage_measurment();  break;
 155   2          case 1:   rms_measurment();         break;
 156   2          case 2:   p2p_measurement();        break;
 157   2          case 3:   frequency_measurement();  break;
 158   2        }   
 159   1        
 160   1      } // end timer2 interrupt service routine


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    346    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     42       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
